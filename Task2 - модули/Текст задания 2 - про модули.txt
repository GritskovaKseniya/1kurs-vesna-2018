Добрый день!
 
Высылаю второе задание по программированию.
 
Доселе текст программы помещался в одном файле main.cpp. С ростом сложности программы растёт и её размер, поэтому логична мысль разбить текст программы на несколько файлов. Осмысленно разбить - примерно так, как текст книги делится на главы и параграфы.
 
В этом задании мы разработаем собственный модуль, подключим его при помощи инструкции препроцессора #include в основной файл программы (main.cpp) и продемонстрируем его возможности.
 
Представьте, что в языке C++ нет массивов. Т.е. нет оператора [ ] для получения элемента массив и вообще нельзя объявить массив так: int a[100].
 
Вам необходимо разработать модуль с именем IntArr, который реализует работу с массивами на основе указателей, динамического выделения памяти в куче и функций. Требования следующие:
* хранение значений типа int
* одномерные массивы с индексацией от нуля
* проверка выхода за границы массива (т.е. все опасные операции должны тем или иным образом возвращать бинарный флаг bool ok, который принимает значение false, если возникла ошибка).
 
Отмечу, что проверку выхода за границы массива нельзя реализовать способом "пусть пользователь отдельным параметром передаёт длину массива". Не перекладывайте проблемы реализации на программиста-пользователя вашего модуля - это ваша задача предоставить ему тип данных, который хранит в себе и данные массива, и его длинну.
 
Это можно сделать так. Доступ к данным массива мы сделаем при помощи указателя int* data, который указывает на блок памяти в куче, в котором собственно и хранятся данные. Длинна массива будет храниться в переменной int length. Хотелось бы объединить эти 2 вещи в единое целое, т.е. построить составной тип данных, состоящий из двух простых.
 
Для этого в C есть структура данных, которая называется "структура". Она позволяет объединить несколько переменных в одну, причём у каждой из них сохранится имя.
 
Итак, мы объявляем тип данных IntArray
 
struct IntArray
{
int* data;
int length;
}
 
Пользоваться им можно так:
 
IntArray a;
a.size = 10;
a.data = new int[10];
 
 
Это объявление следует включить в заголовочный файл IntArr.h.
 
Напомню, что текст модуля в C++ принято разбивать на 2 файла с одинаковым именем (IntArr), но разным расширением.
Заголовочный файл (.h) содержит только объявления (без реализации) функций и типов, которыми будет пользоваться программист-пользователь. Эти объявления сопровождаются подробнейшими комментариями (их принято начинать с трёх слешей ///), что это эта функция делает и что значат её параметры.
Файл реализации (.cpp) подключает заголовочный, тем самым ему становятся известны все объявления. В нём содержатся те же функции, что и в заголовочном, но уже с реализацией. Также в нём могут быть объявлены дополнительные функции и типы данных, нужные для реализации функционала, но невидимые внешнему наблюдателю.
 
Модуль IntArr должен предоставлять следующие функции:
* Создание массива
* Удаление массива (освобождение памяти)
* Запись элемента по индексу (с проверкой выхода за границы)
* Получения значения элемента по индексу (с проверкой выхода за границы).
 
В функции main() нужно продемонстрировать работу Вашего модуля, а именно:
  1) пользователь вводит длину массива
    2)  массив создаётся
    3) Вызываем функцию, которая заполняет массив случайными числами от 1 до 10.
    4) Вызываем функцию, которая выводит массив на экран
    5) Вызываем функцию, которая сортирует массив (любым способом)
    6) Вызываем функцию, которая выводит массив на экран - смотрим, что он действительно отсортировался
    7) Попытка выхода за границы массива - показать, что IntArr просигнализировала об ошибке
    8) Не забудьте освободить память
 
 
В приложении к письму готовый проект для среды разработки Code::Blocks и скриншоты процесса создания этого проекта, по которым Вы сможете понять, как добавлять в проект новые файлы. Вам остётся только дописать недостающий код в файлы main.cpp, IntArr.h и IntArr.cpp.
 
Code::Blocks с недавних пор доступна в Portable-версии (т.е. не требует установки и прав администратора - просто распаковываете архив и запускаете codeblocks.exe) - см http://www.codeblocks.org/downloads/26#windows  - для Windows нужна сборка codeblocks-17.12mingw-nosetup.zip (ссылка для скачивания, которая может со временем сломаться - http://sourceforge.net/projects/codeblocks/files/Binaries/17.12/Windows/codeblocks-17.12mingw-nosetup.zip ).
 
Это обязательное задание. Ниже перечислены бонусные.
 
Доп. задание 1.
 
А что, если из C++ исчезли оператор выделения памяти в куче new и его антипод delete? Тогда мы можем воспользоваться функциями malloc() и free() языка C, которые делают то же самое (модуль <cstdlib>). Изучите эти функции (например на сайте http://en.cppreference.com/w/) и скажите, сильно ли изменится код модуля IntArr и в каких местах?
 
Доп. задание 2.
 
Представьте, что из языка исчезли структуры. Как можно "поместить" длину и данные массива в один лишь указатель int* data?
 
Доп. задание 3.
 
Положим, доп.задание 2 невыполнимо (это не так). Возможно ли реализовать структуру IntArray при помощи указателей, malloc и функций? Как?