#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

void outer_func();
void* inner_func(int);

int main()
{
    outer_func();//вызываем внешнюю функцию
}

void* inner_func(int a) {
    cout << "inner_func: a = " << a << endl;//выводим полученное первоначальные данные = 5
    a += 1;//увеличиваем значение переменной
     // if (a < 7) inner_func(a); //показываем, что переменные создаются в памяти каждый раз при вызове (даже если рекурсия, т. е. вызываем сами себя)
    cout << "inner_func: int the end a = " << a << endl;//выводим значение изменившейся внутренней переменной = 6
    cout << "*" << &a << " = " << a << endl;//выводим данные, которые находятся по указателю изменившийся внутренней переменной
    return &a;
}

void outer_func() {
    int a;//ввели переменную а
    int *inner_a;//переменная, проверяющая содержимое
    a = 5;
    cout << "outer_func: a = " << a << endl; //вывели первоначальное значение переменной = 5
    inner_a = (int *) inner_func(a);//
    cout << "outer_func: in the end a = " << a << endl;//выводим значение переменной а, которая в этом блоке = 5
    cout << "*" << inner_a << " = " << *inner_a << endl;//вывели то, что находится по указателю переменной inner, там уже лежит что-то другое, потому что освободилась память после использования
}
/* есть две функции, внешняя функция outer_func, которую мы вызываем в main и внутренняя функция inner_func, которую вызываем во внешней.
объявляем переменную во внешней функции, выводим зачение переменной.
отправляем значение переменной во внутренню функцию и выводим полученное значение, далее изменяем значение переменной и выводим.
возвращаемся во внешнюю функцию и выводим что там лежит, там выводится значение переменной, которую мы задали изначально,
т.е. это даёт нам понять, что значение переменной видно только в том блоке, в котором создана(объяснение первой задачи)
далее, мы смотрим что лежит по указателю переменной, с которой работаем, там нам выводится значение, т.к. мы работаем с функцией сейчас.
а когда выводим значение переменной по указателю с уже не рабочей функцией, то видим что в этом блоке памяти лежит уже что-то другое, т.к. память сразу же освободилась.(объяснение второй задачи)*/
