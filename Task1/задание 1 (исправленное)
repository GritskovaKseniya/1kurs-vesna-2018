#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

void outer_func(); 
void* inner_func(int);

int main()
{
    outer_func(); //вызываем внешнюю функцию
}

void* inner_func(int a) 
{
    cout << "inner_func: a = " << a << endl; //вводим первоначальные данные во внутреннюю функцию
    a += 1; //увеличение значения переменной
     // if (a < 7) inner_func(a); //показываем, что переменные создаются в памяти каждый раз при вызове (даже если рекурсия, т. е. вызываем сами себя)
    cout << "inner_func: int the end a = " << a << endl;//выводим значение изменившейся внутренней переменной = 6
    cout << "*" << &a << " = " << a << endl;//выводим данные, которые находятся по указателю изменившийся внутренней переменной
    return &a;
}

void outer_func() 
{
    int a; //ввели переменную а
    int *inner_a; //переменная внутренней функции, проверяющая содержимое
    a = 5;
    cout << "outer_func: a = " << a << endl; //вывели первоначальное значение переменной = 5
    inner_a = (int *) inner_func(a); 
    cout << "outer_func: in the end a = " << a << endl; //выводим значение переменной а = 5
    cout << "*" << inner_a << " = " << *inner_a << endl; //выводим то, что находится по указателю переменной inner, там уже лежит что-то
}

// объявляем переменную во внешней функции и  выводим ее зачение
// отправляем значение переменной во внутренню функцию и выводим значение
// изменяем значение переменной и выводим значение во внешной функции
// возвращаемся во внешнюю функцию и выводим что там лежит (выводится изначальное значение)
